// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  userName String @unique
  email String @unique 
  password String
  isVerified Boolean @default(false)

  servers Server[]
  members Member[]
  channelMessage ChannelMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId Int
  users User @relation(fields: [adminId] , references: [id] , onDelete: Cascade)

  channels Channel[]
  members Member[]
  channelMessage ChannelMessage[]

  @@index([adminId])
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Channel {
  id Int @id @default(autoincrement())
  name String
  type ChannelType @default(TEXT)
  serverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  server Server @relation(fields: [serverId] , references: [id] , onDelete: Cascade)

  channelMessage ChannelMessage[]

  @@index([serverId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id Int @id @default(autoincrement())
  userId Int
  serverId String
  role MemberRole @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  server Server @relation(fields: [serverId] , references: [id] , onDelete: Cascade)

  @@index([userId])
  @@index([serverId])
}

model ChannelMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  serverId String
  channelId Int

  users User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  server Server @relation(fields: [serverId] , references: [id] , onDelete: Cascade)
  channel Channel @relation(fields: [channelId] , references: [id] , onDelete: Cascade)

}
